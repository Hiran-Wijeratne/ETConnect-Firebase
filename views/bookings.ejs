<%- include("partials/sidebar.ejs") %>

<main class="p-6 flex flex-col gap-6">
  <!-- Bookings Table -->
  <section class="bg-white p-6 rounded-lg shadow">
    <h2 class="text-lg font-bold">Booking Management</h2>
    
    <!-- Display Flash Message -->
    <div class="mt-5"></div>
    <% if (locals.errorMessage && locals.errorMessage.length > 0) { %>
      <div class="mt-5"></div>
      <div class="error-message bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <span class="block sm:inline"><%= errorMessage %></span>
      </div>
      <div class="mt-5"></div>
    <% } %>

    <div class="overflow-x-auto">
      <table class="table-auto w-full mt-4 border-collapse border border-gray-300">
        <thead>
          <tr class="bg-gray-200">
            <th class="border border-gray-300 px-4 py-2">
              <input type="checkbox" id="bulk-select-all" onclick="toggleAllBookings()" />
            </th>
            <th class="border border-gray-300 px-4 py-2">Email</th>
            <th class="border border-gray-300 px-4 py-2">Room Name</th>
            <th class="border border-gray-300 px-4 py-2">Date</th>
            <th class="border border-gray-300 px-4 py-2">Start Time</th>
            <th class="border border-gray-300 px-4 py-2">End Time</th>
            <th class="border border-gray-300 px-4 py-2">Actions</th>
          </tr>
        </thead>
        <tbody id="bulk-select-body">
          <% bookings.forEach((booking) => { %>
            <tr data-booking-id="<%= booking.id %>">
              <td class="border border-gray-300 px-4 py-2">
                <input type="checkbox" class="bulk-select-checkbox" value="<%= booking.id %>" onclick="toggleDeleteButton()" />
              </td>
              <td class="border border-gray-300 px-4 py-2"><%= booking.email %></td>
              <td class="border border-gray-300 px-4 py-2"><%= booking.room_name %></td>
              <td class="border border-gray-300 px-4 py-2"><%= new Date(booking.created_at).toLocaleDateString() %></td>
              <td class="border border-gray-300 px-4 py-2"><%= booking.starttime %></td>
              <td class="border border-gray-300 px-4 py-2"><%= booking.endtime %></td>
              <td class="border border-gray-300 px-4 py-2 flex space-x-2">
                <button class="bg-red-500 text-white px-4 py-1 rounded hover:bg-red-600" onclick="deleteBooking('<%= booking.id %>')">Delete</button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <!-- Bulk Actions -->
    <div class="mt-4 flex justify-end space-x-4">
      <button id="deleteButton" onclick="deleteSelectedBookings()" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600" style="display: none">
        Delete Selected
      </button>
    </div>
  </section>
</main>
</div>

<script src="/js/custom.js"></script>

<script>
// Function to toggle bulk selection checkboxes
function toggleAllBookings() {
  const checkboxes = document.querySelectorAll('.bulk-select-checkbox');
  const bulkSelectAll = document.getElementById('bulk-select-all');
  checkboxes.forEach(checkbox => checkbox.checked = bulkSelectAll.checked);
  toggleDeleteButton();
}

// Function to toggle the delete button based on selection
function toggleDeleteButton() {
  const selectedCheckboxes = document.querySelectorAll('.bulk-select-checkbox:checked');
  const deleteButton = document.getElementById('deleteButton');
  deleteButton.style.display = selectedCheckboxes.length > 0 ? 'inline-block' : 'none';
}

// Function to delete a booking
function deleteBooking(bookingId) {
  if (confirm('Are you sure you want to delete this booking?')) {
    // Perform DELETE request via fetch
    fetch(`/deleteBooking/${bookingId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then(response => {
        if (response.ok) {
          alert("Booking deleted successfully!");
          // Optionally, you can redirect the user to another page or refresh the current page
          window.location.reload(); // Refresh the page to reflect changes
        } else {
          alert("Failed to delete booking.");
        }
      })
      .catch(error => {
        console.error("Error deleting booking:", error);
        alert("An error occurred while deleting the booking.");
      });
  }
}


// Function to delete selected bookings
async function deleteSelectedBookings() {
  const selectedCheckboxes = document.querySelectorAll(".bulk-select-checkbox:checked");
  const bookingIds = Array.from(selectedCheckboxes).map((checkbox) => checkbox.value);

  // Check if any booking is selected
  if (bookingIds.length === 0) {
    alert("No bookings selected for deletion.");
    return;
  }

  // Confirm deletion
  if (!confirm(`Are you sure you want to delete ${bookingIds.length} bookings?`)) {
    return;
  }

  try {
    // Perform DELETE request for each selected booking ID
    for (const bookingId of bookingIds) {
      await fetch(`/deleteBooking/${bookingId}`, { method: "DELETE" });
    }

    // Show success message and reload the page
    alert("Selected bookings deleted successfully!");
    window.location.reload();
  } catch (error) {
    console.error("Error deleting bookings:", error);
    alert("An error occurred while deleting the bookings.");
  }
}



</script>

</body>
</html>
