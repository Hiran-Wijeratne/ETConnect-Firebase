<%- include("partials/header.ejs") %>
</div>
 <!-- header section end -->
  <!-- banner section start -->
  <div class="banner_section layout_padding">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <div id="scrollButton" class="read_bt"><a style="color: white;">Edit Your Booking</a></div>
          <div class="scroll-marker"></div>
        </div>
      </div>
    </div>
  </div>
  <!-- banner section end -->
  </div>
 <!-- header section end -->
  <!-- appointment section start -->
  <!-- First Form Section -->
  <div class="appointment_section" id="firstForm">
    <div class="container">
      <div class="appointment_box">
        <div class="row">
          <div class="col-md-12">
            <h1 class="appointment_taital">Edit <span style="color: #0cb7d6;">Bookings No <%= booking.booking_id %></span></h1>
          </div>
        </div>
        <div class="appointment_section_2">
          <form action="/edit" method="post" id="appointmentForm">
            <div class="row">
              <div class="col-md-6">
                <input type="hidden" name="bookingId" value="<%= booking.booking_id %>">
                <div class="form-group">
                  <p class="doctorname_text">Meeting Room</p>
                  <select class="wide" name="room_id" id="roomSelect" required>
                    <!-- Room options will be dynamically added here -->
                  </select>
                  <input type="hidden" name="room_name" id="hiddenRoomName" value="">
                </div>
              </div>
              <div class="col-md-6">
                <p class="doctorname_text_date">Choose Date</p>
                <input id="datepicker" value="<%= booking.date %>" required autocomplete="off"/>
                <input type="hidden" name="date" id="hiddenDate" value="<%= booking.date %>" hidden required>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <p class="doctorname_text">Purpose of the Meeting</p>
                <input type="text" class="email_text" placeholder="Meeting Details" name="purpose" value="<%= booking.description %>" required>
              </div>
              <div class="col-md-6">
                <p class="doctorname_text" style="visibility: hidden;">Submit Button Hidden Label</p>
                <input class="read_bt_next_button" id="nextButton" type="button" value="next">
              </div>
            </div>
        </div>
      </div>
    </div>
  </div>


  <!-- Second Form Section (Initially Hidden) -->
  <div class="appointment_section" id="secondForm" style="display: none;">
    <div class="container">
      <div class="appointment_box">
        <div class="row">
          <div class="col-md-12">
            <div class="form-group">
              <h1 class="appointment_taital">Schedule <span style="color: #0cb7d6;">Your Meeting</span></h1>
            </div>
          </div>
          <div class="appointment_section_2">
            <div class="container">
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <p class="doctorname_text">Start Time</p>
                    <select class="wide" name="start" required>
                      <option value="">Select Your End Time</option>
                      <!-- <select class="wide" name="start" required> -->
                        <% ['08:00', '08:30', '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30','13:00',
                        '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'].forEach(time => { %>
                            <option value="<%= time %>" <%= booking.start_time === time ? 'selected' : '' %>><%= time %></option>
                        <% }); %>
                    </select>
                      <!-- <option>Select Your Start Time</option>
                      <option value="08:00:00">08:00:00 </option>
                      <option value="09:00:00">09:00:00 </option>
                      <option value="10:00:00">10:00:00 </option>
                      <option value="11:00:00">11:00:00 </option>
                      <option value="12:00:00">12:00:00</option>
                      <option value="13:00:00">13:00:00 </option>
                      <option value="14:00:00">14:00:00 </option>
                      <option value="15:00:00">15:00:00 </option>
                      <option value="16:00:00">16:00:00 </option>
                      <option value="17:00:00">17:00:00 </option>
                    </select> -->
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <p class="doctorname_text">End Time</p>
                    <select class="wide" name="end" required>
                      <option value="">Select Your End Time</option>
                      <% ['08:30', '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30','13:00',
                      '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30', '18:00'].forEach(time => { %>
                      <option value="<%= time %>" <%= booking.end_time === time ? 'selected' : '' %>><%= time %></option>
                      <% }); %>
                      <!-- <option>Select Your End Time</option>
                      <option value="09:00:00">09:00:00 </option>
                      <option value="10:00:00">10:00:00 </option>
                      <option value="11:00:00">11:00:00 </option>
                      <option value="12:00:00">12:00:00</option>
                      <option value="13:00:00">13:00:00 </option>
                      <option value="14:00:00">14:00:00 </option>
                      <option value="15:00:00">15:00:00 </option>
                      <option value="16:00:00">16:00:00 </option>
                      <option value="17:00:00">17:00:00 </option>
                      <option value="18:00:00">18:00:00 </option> -->
                    </select>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-8">
                  <h1 class="doctorname_text_chosen_date">Your selected meeting date is ...</h1>
                </div>
                <div class="col-md-12" id="bookingsList">
                </div>
                <div class="row">
                  <div class="col-md-8">
                    <p class="doctorname_text" style="visibility: hidden;">Submit Button Hidden Label</p>
                    <p class="doctorname_text">Your Current Booking (before updating):</p>
                      <p class="doctorname_text">Booking ID: <%=booking.booking_id %> | ðŸ“… <%=booking.date %> | ðŸ•’ <%=booking.start_time %> - <%=booking.end_time %></p>
                  </div>
                  <div class="col-md-2">
                    <p class="doctorname_text" style="visibility: hidden;">Submit Button Hidden Label</p>
                    <input class="read_bt_submit_button" id="backButton" type="button" value="Back">
                  </div>
                  <div class="col-md-2">
                    <p class="doctorname_text" style="visibility: hidden;">Submit Button Hidden Label</p>
                    <input class="read_bt_submit_button" type="submit" value="Update">
                  </div>
                </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- appointment section end -->
  <script>
    // Serialize the upcoming bookings as JSON
    const updatingBooking = <%- JSON.stringify(booking) %>;
</script>
<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
  import { getFirestore, collection, getDocs } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";

  // Your Firebase config object
  const firebaseConfig = {
    apiKey: "AIzaSyBr3CuAMcXz2OPveIVygpaW5GFQmO_9218",
    authDomain: "booking-system-fdbc1.firebaseapp.com",
    projectId: "booking-system-fdbc1",
    storageBucket: "booking-system-fdbc1.firebasestorage.app",
    messagingSenderId: "856434982116",
    appId: "1:856434982116:web:826b0c0e45615cb2e000f1",
    measurementId: "G-FRLGT31KYY"
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);

  // Firestore reference
  const db = getFirestore(app);

  async function fetchRooms() {
    const roomsCol = collection(db, 'meeting_rooms');
    const querySnapshot = await getDocs(roomsCol);
    const roomSelect = document.getElementById('roomSelect');
    console.log("Fetched Firestore data:", querySnapshot);

    let defaultRoomId = "<%= booking.room_id %>"; // Booking's room_id

    if (querySnapshot.empty) {
      console.log("No rooms available in Firestore");
      roomSelect.innerHTML = "<option>No rooms available</option>";
      return;
    }

    // Create and append options dynamically from Firestore data
    querySnapshot.forEach((doc) => {
      const roomData = doc.data();
      console.log("Room Data:", roomData);  // Log the room data for each document
      const option = document.createElement('option');
      option.value = doc.id;
      option.text = roomData.name || "No Name";

      roomSelect.appendChild(option);

      // Set default selection based on the booking's room_id
      if (doc.id === defaultRoomId) {
        option.selected = true;
      }
    });

    // Reinitialize Nice Select (if necessary)
    $('#roomSelect').niceSelect('update');
    console.log("Dropdown options after Nice Select:", roomSelect.options);
  }

  // Fetch the meeting rooms data from Firestore
  fetchRooms().catch(error => console.error("Error fetching rooms:", error));

  // Set up event listener to update hidden input for room name on change
  document.addEventListener("DOMContentLoaded", () => {
    const roomSelect = document.getElementById('roomSelect');

    // Optionally, set the hidden room name if there's a preselected room
    const initialRoomId = "<%= booking.room_id %>";
    const initialRoomOption = Array.from(roomSelect.options).find(option => option.value === initialRoomId);
    if (initialRoomOption) {
      document.getElementById('hiddenRoomName').value = initialRoomOption.text;  // Set initial value
    }

    // Listen for changes and update the hidden input for room name
    roomSelect.addEventListener('change', (event) => {
      const selectedRoomId = event.target.value;
      const selectedOption = event.target.options[event.target.selectedIndex];
      const selectedRoomName = selectedOption ? selectedOption.text : '';

      if (selectedRoomName) {
        document.getElementById('hiddenRoomName').value = selectedRoomName;  // Update hidden input
      }
    });

    // Re-fetch room names when the form is submitted and before actually submitting it
    document.querySelector("form").addEventListener("submit", function(event) {
      // Force update hiddenRoomName before submitting
      const roomSelect = document.getElementById('roomSelect');
      const selectedRoomId = roomSelect.value;
      const selectedOption = roomSelect.options[roomSelect.selectedIndex];
      const selectedRoomName = selectedOption ? selectedOption.text : '';

      document.getElementById('hiddenRoomName').value = selectedRoomName;
      console.log("Room Name before form submission:", selectedRoomName);  // Log for debugging

      // If the room name is still empty, prevent submission and alert the user
      if (!selectedRoomName) {
        event.preventDefault();  // Prevent form submission if room name is empty
        alert("Please select a room.");
      }
    });
  });




  
  document.addEventListener('DOMContentLoaded', () => {
  const roomSelect = $('#roomSelect');
  const startTimeSelect = $('select[name="start"]');
  const endTimeSelect = $('select[name="end"]');

  // Function to reset the time slots
  function resetTimeSlots() {
    // Reset the start time selection
    startTimeSelect.val(''); // Set to default value (e.g., placeholder value)
    startTimeSelect.niceSelect('update'); // Update Nice Select dropdown

    // Reset the end time selection
    endTimeSelect.val('');
    endTimeSelect.niceSelect('update');
  }

  // Event listener for room selection change
  roomSelect.on('change', () => {
    resetTimeSlots();
  });
});


</script>










<%- include("partials/footer.ejs") %>